---
name: 06-07_participation
break: true
indent: 4
---

# --> check the technical writing for various characteristics
writing/reflections.md:
    ConfirmFileExists
    CountFileWords --count 100
    CountMarkdownTags --tag "heading" --count 3
    MatchFileFragment --fragment "Your Name" --count 0 --exact
    MatchFileFragment --fragment "TODO" --count 0 --exact

# --> check the technical writing for various characteristics
src/ML1.R:
    ConfirmFileExists
    MatchFileFragment --fragment "Your Name" --count 0 --exact
    MatchFileFragment --fragment "TODO" --count 0 --exact

# --> check the technical writing for various characteristics
src/ML2.R:
    ConfirmFileExists
    MatchFileFragment --fragment "Your Name" --count 0 --exact
    MatchFileFragment --fragment "TODO" --count 0 --exact

# --> check that the number of commits in the Git repository is beyond a threshold
CountCommits --count 1

# --> check that the program executes correctly and produces exactly 4 lines of output
#ExecuteCommand --command "gradle build"
#ExecuteCommand --command "gradle -q --console plain run"
#CountCommandOutput --command "gradle -q --console plain run" --count 4 --exact

# --> check that the program produces the output sentences in this order:
# Gregory M. Kapfhammer Fri Sep 06 01:31:11 GMT 2019
# Hello World.
# Gradle is Great.
# Docker is Dynamite.
# Note: this check's focus is on the three lines after the name and the date
#MatchCommandRegex --command "gradle -q --console plain run" --count 1 --regex "Hello\s+\w+\.(\n)Gradle(\s+\w+)*\.(\n)Docker(\s+\w+)*\." --exact
